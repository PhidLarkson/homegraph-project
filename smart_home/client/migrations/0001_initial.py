# Generated by Django 4.2.8 on 2024-01-07 09:42

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.IntegerField(editable=False, primary_key=True, serialize=False)),
                ('theme', models.CharField(default='#fffff', max_length=20)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customuser_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_permissions', to='auth.permission', verbose_name='custom user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='DataSensorObjects',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('value', models.CharField(blank=True, max_length=100)),
                ('room_states', models.CharField(blank=True, max_length=100)),
                ('power_reading', models.TextField(max_length=20)),
                ('weather_reading', models.CharField(blank=True, max_length=100)),
                ('sensor_reading', models.CharField(blank=True, max_length=100)),
                ('is_automated', models.BooleanField(default='False')),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.TextField()),
                ('switch_name', models.TextField(max_length=20)),
                ('is_automated', models.BooleanField(default='False')),
            ],
        ),
        migrations.CreateModel(
            name='SerialConfigurationObjectA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_port', models.CharField(blank=True, default='COM3', max_length=100)),
                ('serial_baudrate', models.IntegerField(default=9600)),
                ('connection_timeout', models.IntegerField(default=30)),
            ],
        ),
        migrations.CreateModel(
            name='SerialConfigurationObjectB',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('serial_port', models.CharField(blank=True, default='COM3', max_length=100)),
                ('serial_baudrate', models.IntegerField(default=9600)),
                ('connection_timeout', models.IntegerField(default=30)),
            ],
        ),
        migrations.CreateModel(
            name='RoomObjectIdentifiers',
            fields=[
                ('service_room', models.CharField(choices=[('1', 'living room'), ('2', 'kitchen'), ('3', 'wash room'), ('4', 'bath'), ('5', 'bedroom'), ('6', '...')], default='1', max_length=20)),
                ('switch_type', models.CharField(choices=[('1', 'Single'), ('2', 'Multiple')], default='1', max_length=20)),
                ('roomObject_id', models.IntegerField(editable=False, primary_key=True, serialize=False)),
                ('roomObject_name', models.CharField(max_length=200, unique=True)),
                ('interaction_count', models.IntegerField(default=0)),
                ('interaction_key', models.CharField(blank=True, max_length=100)),
                ('pinned_room_object', models.BooleanField(default=False)),
                ('room_marker', models.IntegerField(default=0)),
                ('IO_state', models.BooleanField(default=True)),
                ('color', models.CharField(default='#fffff', max_length=20)),
                ('room_operator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='client.customuser')),
            ],
            options={
                'ordering': ['-room_marker'],
            },
        ),
    ]
